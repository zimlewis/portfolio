package header

import "github.com/zimlewis/portfolio/components/sidebar"
import "github.com/zimlewis/portfolio/components/icon"
import "github.com/zimlewis/portfolio/components/collapsible"


type MenuProps struct {
	Label string
	Icon  func(...icon.Props) templ.Component
}

type SingleMenuProps struct {
	Href string
	MenuProps
}

type DropdownMenuProps struct {
    Items []DropdownMenuItemProps
	MenuProps
}

type DropdownMenuItemProps struct {
    Label string
    Href string
}

type NavigationMenuItem struct {
    SingleMenu *SingleMenuProps
    DropdownMenu *DropdownMenuProps
}

type NavigationMenuProps struct {
    Items []NavigationMenuItem
}

templ NavigationMenu(props NavigationMenuProps) {
	@sidebar.Content() {
		@sidebar.Menu() {
            for _, item := range props.Items {
                if item.DropdownMenu != nil {
                    {{ var menu = *item.DropdownMenu }}
                    @dropdownMenu(menu)
                }
                if item.SingleMenu != nil {
                    {{ var menu = *item.SingleMenu }}
                    @singleMenu(menu)
                }
            }
		}
	}
}


templ singleMenu(props SingleMenuProps) {
	@sidebar.MenuItem() {
		@sidebar.MenuButton(sidebar.MenuButtonProps{
			Attributes: templ.Attributes{
				"x-target.push": "main",
			},
			Href:    props.Href,
			Tooltip: props.Label,
		}) {
			@props.Icon(icon.Props{Class: "size-4"})
			<span>{ props.Label }</span>
		}
	}
}



templ dropdownMenu(props DropdownMenuProps) {
	@sidebar.MenuItem() {
		@collapsible.Collapsible(collapsible.Props{
			Open:  true,
			Class: "group/collapsible w-full",
		}) {
			@collapsible.Trigger() {
				@sidebar.MenuButton(sidebar.MenuButtonProps{
					Tooltip: props.Label,
				}) {
					@props.Icon(icon.Props{Class: "size-4"})
					<span>{ props.Label }</span>
					@icon.ChevronRight(icon.Props{
						Class: "ml-auto size-4 transition-transform group-data-[tui-collapsible-state=open]/collapsible:rotate-90",
					})
				}
			}
			@collapsible.Content() {
				@sidebar.MenuSub() {
                    for _, item := range props.Items {
                        @dropdownMenuItem(item)
                    }
				}
			}
		}
	}
}

templ dropdownMenuItem(props DropdownMenuItemProps) {
	@sidebar.MenuSubItem() {
		@sidebar.MenuSubButton(sidebar.MenuSubButtonProps{
			Href: props.Href,
			Attributes: templ.Attributes{
				"x-target.push": "main",
			},
		}) {
			<span>{ props.Label }</span>
		}
	}
}
